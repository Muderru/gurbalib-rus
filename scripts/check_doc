#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

my (%Options, $Debug);

sub usage {
	print "Usage: $0 [DIR | FILE]\n";
	print "Check the specified FILE or files in a DIR to see if they\n";
	print "are a decent man page.  If no DIR is specified run through\n";
	print "our default manpage directorys, and command.\n";

	return 1;
}

sub file_contains {
	my ($file, $line) = @_;
	my $subname = "file_contains";

	if ($Debug) {
		print "$subname: $file, $line\n";
	}

	my $tmp = `grep $line \"$file\"`;

	chomp $tmp;

	if ($tmp && (length($tmp) > 1)) {
		return 1;
	}
	return 0;
}

sub get_dir_info {
	my ($fullfilename) = @_;
	my (@values, $i, $t, $dir);
	my $subname = "get_dir_info";

	@values = split('/', $fullfilename);
	$i = $#values;

	$t = length($fullfilename) - length($values[$i]);

	$dir = substr($fullfilename, 0, $t);
	if ($Debug) {
		print "$subname: fullfilename = $fullfilename\n";
		print "$subname: i = $i t = $t dir = $dir\n";
		print "$subname: values[i] = $values[$i]\n";
	}

	return ($dir ,$values[$i -1], $values[$i]);
}

sub get_see_also {
	my ($filename) = @_;
	my ($fh, $seeit);
	my (@values, @tmp);
	my $subname = "get_see_also";

	@tmp = ();
	open($fh,"<", $filename) or die "Unable to open $filename\n";
	$seeit = 0;
	while(<$fh>) {
		my $line = $_;

		if ($seeit) {
			$line =~ s/\s+//g; # Filter out whitespace
			@tmp = split(",", $line);
			push(@values, @tmp);
			
		} else {
			if ($line =~ /(.*)SEE ALSO(.*)/) {
				$seeit = 1;
			}
		}
	}

	return @values;
}

sub get_doc_file {
	my ($infile) = @_;

	if ($infile =~ /safun\/(.*)/) {
		if (-d "./safun") {
			return "./safun/$1";
		}
		return "./lib/doc/safun/$1";
	} elsif ($infile =~ /afun\/(.*)/) {
		if (-d "./afun") {
			return "./afun/$1";
		}
		return "./lib/doc/afun/$1";
	} elsif ($infile =~ /kfun\/(.*)/) {
		if (-d "./kfun") {
			return "./kfun/$1";
		}
		return "./lib/doc/kfun/$1";
	} else {
		return "";
	}
}

sub check_seealso {
	my ($fullfile) = @_;
	my ($dir, $subdir, $file) = get_dir_info($fullfile);
	my $subname = "check_seealso";

	my @values = get_see_also($fullfile);

	if ($Debug) { 
	   print "$subname: $dir, $subdir, $file\n";
           print "Calling get_see_also($fullfile), got:\n";
		foreach my $i (@values) {
			print "\t$i\n";
		}
	}

	foreach my $i (@values) {
		my $fullpath = get_doc_file($i);

		if ($fullpath eq "") {
			if ($Debug) {
				print "Skipping $i, unable to determine " .
					"fullpath\n";
			}
		} elsif (!-f "$fullpath") {
			print "$file, SEE ALSO: no such file $i\n";
		} else {
			if ($fullpath =~ /.lib\/doc\/kfun(.*)/ &&
				$subdir ne "kfun") {
				# kfun's shouldn't reference non kfun's
				if ($Debug) {
					print "Skipping $fullpath " .
						"$subdir/$file kfuns should " .
						"not ref other docs\n";
				}
			} elsif (!file_contains($fullpath, "$subdir/$file")) {
				print "SEE ALSO: $fullpath does not " .
					"reference $subdir/$file\n";
			}
		}
	}
}

sub check_blank_lines {
	my ($file) = @_;
	my $line;
	my $res = "woo";

	open(my $fh, "<", $file) or die "Unable to open $file\n";
	while (<$fh>) {
		$line = $_;
		if (($line eq "\n") && ($res eq "\n")) {
			print "$file: Contains multiple blank " .
				"lines in a row.\n";

		}

		# This isn't actually checking blank lines but also useful
		# and more efficent to do it here than another function

		if (length($line) > 80) {
			print "$file: Has a line that is over 80 chars:\n";
			print "$file: $line\n";
		}

		$res = $line;
	}
	if ($res eq "\n") {
		print "$file: blank line at the end.\n";
	}
}

sub check_starts_with_space {
	my ($file) = @_;

	if (file_contains($file, "^\\ \\ \\ ",)) {
		print "$file contains lines that start with space.\n";
	}
}

sub check_fun_file {
	my ($file) = @_;
	my $subname = "check_fun_file";

	if ($file =~ /(.*)\.txt/) {
		# Skip it we want .c files and directories
		return;
	}

	foreach my $i ("Usage:", "Options:", "Examples:", "get_alsos") {

		if (!file_contains($file, $i)) {
			print("$file is missing $i\n");
		}
	}

	my $line = `grep Usage: $file`;
	if ($line =~ /lines\ \=\ \(\{ \"Usage:(.*)/) {
		my @values = `grep lines $file | grep \+\=`;
		my $done = 0;
		my @cmds;
		foreach my $i (@values) {
			if ($done) {
				if ($i =~ /lines += \(\{ \"(.*)\" \}\);(.*)/) {
					my @vals = split(",", $1);

					foreach my $t (@vals) {
						push(@cmds, $t);
					}
				} elsif ($i =~ /lines += \(\{ \"(.*)\" \+/) {
					my @vals = split(",", $1);

					foreach my $t (@vals) {
						push(@cmds, $t);
					}
				} elsif ($i =~ /\"(.*)\" \}\)(.*)/) {
					my @vals = split(",", $1);

					foreach my $t (@vals) {
						push(@cmds, $t);
					}
				} else  {
# Ignore these lines...
#					print "$file: Error: $i\n";
				}
			} elsif ($i =~ /(.*)See also:(.)/) {
				$done = 1;
			}
# XXX Here need to look at all cmds to see if they reference our command.
#			print "$file: @cmds\n";
		}
	} else { 
		print "Error $file : usage: $line\n";
	}
}

sub check_file {
	my ($file) = @_;
	my $subname = "check_file";

	foreach my $i ("NAME", "SYNOPSIS", "DESCRIPTION", "RETURN", 
		"EXAMPLES", "SEE") {

		if (!file_contains($file, $i)) {
			if ($i eq "SEE") {
				print("$file is missing SEE ALSO\n");
			} elsif ($i eq "RETURN") {
				print("$file is missing RETURN VALUE\n");
			} else {
				print("$file is missing $i\n");
			}
		}
	}

	check_starts_with_space($file);
	check_seealso($file);
	check_blank_lines($file);
}

sub check_source_doc_match {
	my ($source, $docdir) = @_;
	my (@files, $fh, $tmp); 
	my $subname = "check_source_doc_match";

	opendir($fh, $source) or die "Unable to open $source\n";;
	@files = readdir($fh);
	close $fh;

	foreach my $i (@files) {
		my $tmp;

		if ($i eq ".." || $i eq ".") {
		} elsif (-f "$source/$i") {
			if ($i =~ /(.*)\.c/) {
				$tmp = $1;
			} else {
				$tmp = $i;
			}

			if (! -f "$docdir/$tmp") {
				print "Missing $docdir/$tmp\n";
			}
		} else {
			print "You should look at $source/$i\n";
		}
	}
}

sub check_dir {
	my ($dir,$funflag) = @_;
	my (@files, $fh, $tmp); 
	my $subname = "check_dir";

	opendir($fh, $dir) or die "Unable to open $dir\n";;
	@files = readdir($fh);
	close $fh;

	foreach my $i (@files) {
		if ($i eq "." || $i eq "..") {
		} elsif (-d "$dir/$i") {
			check_dir("$dir/$i", $funflag);
		} else {
			if ($funflag) {
				check_fun_file("$dir/$i");
			} else {
				check_file("$dir/$i");
			}
		}
	}
}

sub do_checks {
	my ($dir, $source) = @_;

	if (-d $dir) {
		check_source_doc_match($source, $dir);
		check_dir($dir, 0);
	} else {
		print "Unable to find $dir\n";
	}
}

sub do_fun_checks {
	my ($dir) = @_;
}

&GetOptions(\%Options, "help", "debug");

my ($fname) = @ARGV;
if ($Options{"debug"}) {
	$Debug = 1;
}

if ($Options{"help"}) {
	usage();
} elsif (!$fname || $fname eq "") {
        do_checks("./lib/doc/afun", "./lib/kernel/lib/afun");
	do_checks("./lib/doc/safun", "./lib/sys/lib/safun");
	check_dir("./lib/cmds", 1);
	check_dir("./lib/sys/cmds", 1);
} elsif (-d $fname) {
	check_dir($fname, 0);
} elsif (-f $fname) {
	check_file($fname);
} else {
	usage();
}
